package de.museum.berleburg.datastorage.backup;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import de.museum.berleburg.datastorage.Configuration;
import de.museum.berleburg.datastorage.MuseumDB;
import de.museum.berleburg.datastorage.manager.ProcessCallBack;
import de.museum.berleburg.exceptions.AddressHasNoValueException;
import de.museum.berleburg.exceptions.ConnectionException;
import de.museum.berleburg.exceptions.DatabaseDriverNotFoundException;
import de.museum.berleburg.exceptions.MuseumIDNotFoundException;
import de.museum.berleburg.exceptions.NotAZipFileException;

/**
 * Class which includes the methods to create a backup file
 * 
 *  @author Tim Wesener 
 */

public class DumpCreator {
	
	/**
	 *	Creates a backup file with the given file address (address). 
	 *	If musID is null the whole system will get an backup.
	 *
	 * @param address: the file address where the backup should be. It has to be a *.zip file
	 * @param musID: the ID of the museum that should get an backup. If null the whole system gets a backup
	 * 
	 * @throws MuseumIDNotFoundException: If the musID is not in the Database
	 * @throws NotAZipFileException: If address doesn't end with .zip
	 * @throws AddressHasNoValueException: If address is empty or null
	 * @throws MuseumIDNotFoundException: If id is not in Database
	 * @throws FileNotFoundException: 
	 * @throws ConnectionException 
	 */
	public static void backup(String address, Integer musID, ProcessCallBack callback ) throws MuseumIDNotFoundException, DatabaseDriverNotFoundException, NotAZipFileException, AddressHasNoValueException, FileNotFoundException, ConnectionException 
	{			
		/**
		 * Checks if valid address
		 */
		if(address.equals("") || address == null)
		{
			throw new AddressHasNoValueException("address is empty oder NULL");
		}
		else if(!address.endsWith(".zip") )
		{
			throw new NotAZipFileException("Not the address of an *.zip file");
		}
		
		
		if(musID == null)
		{ backup(address, callback); return; }		
		
		Configuration.getInstance().setDefault();	
						
		//Connection connection = null;
		Statement statement = null;
		ResultSet result;		
			
		ZipOutputStream zipOutputStream = null;
		ZipEntry entry = null;
		
		/**
		 * Sets Connection to the File and to the Database
		 */
		try {
			zipOutputStream = new ZipOutputStream( new FileOutputStream(address)) ;
			
			statement = Configuration.getInstance().getConnection().createStatement();			
			
		}  catch (SQLException e) {
			e.printStackTrace();
		} 
		
		/**
		 * Checks if museumID is valid
		 */
		try{
			result = statement.executeQuery("SELECT count(*) FROM " + MuseumDB.Museum.TABLE_NAME + " WHERE " + MuseumDB.Museum.ID + " = " + musID );
			result.next();
			
			if(result.getInt(1) == 0)
				throw new MuseumIDNotFoundException("Museum ID '" + musID + "' was not found in the database");
		}
		catch (SQLException e)
		{
			e.printStackTrace();
		}		
		
		/**
		 * Now the filewriting starts
		 */
		try {
			zipOutputStream.putNextEntry( new ZipEntry("backup.sql") );
			
			addToZIP(zipOutputStream, "-- -------------------------------------------------\n");
			addToZIP(zipOutputStream, "-- ----- Caution: Do not edit this file  \n");
			addToZIP(zipOutputStream, "-- -- except you REALLY know what you are doing\n");
			addToZIP(zipOutputStream, "-- - Otherwhise the complete backup could go wrong! \n");
			addToZIP(zipOutputStream, "-- -------------------------------------------------\n\n");	

			addToZIP(zipOutputStream, "-? (`MuseumBackup`)\n\n");	
			
			/**
			 *  Here is shortly described what happen in the next Part of the Program:
			 *  
			 *  There are 3 Steps for every table:
			 *  1. Write all column names down:
			 *  		INSERT INTO `tablename` (`column1` , `column2` , ... ) VALUES
			 *  2. Gets Values that should be stored (could depend on ID's)
			 *  		('value1' , 'value2' , ... )
			 *  3. Gets id's of the inserted Values (if its needed in later steps 2) 
			 */
						
			ArrayList<Integer> addressList = new ArrayList<Integer>();
			int colnr = 0;
			
			/**
			 * Inserts museum 
			 */			
			String tabelname = MuseumDB.Museum.TABLE_NAME ;
			
			// Step 1:
			String insert = "INSERT INTO `"+ tabelname + "` (";
			
			result = statement.executeQuery("DESCRIBE "+ tabelname);
			
			while(result.next())
			{	//Column 1 has the Column name
				insert += "`"+ result.getString(1) +"`, ";
				colnr++;
			}			
			insert = insert.substring(0, insert.length()-2);
			insert += ") VALUES \n" ;			
			
			addToZIP(zipOutputStream, insert);				
			
			result = null;
			insert = null;
			
			// Step 2:
			result = statement.executeQuery("SELECT * FROM " + tabelname + " WHERE " + MuseumDB.Museum.ID + " = " + musID );
			
			result.next();
			addressList.add( result.getInt(4) ); // Step 3
			
			addToZIP(zipOutputStream, getElement(result,  colnr) + "\n");
			
			
			/**
			 * Inserts address
			 */
			colnr = 0;
			tabelname = MuseumDB.Address.TABLE_NAME ;
			result = null;
			ArrayList<String> addressInserts = new ArrayList<String>();
			
			// Step 1:
			insert = "\nINSERT INTO `"+ tabelname + "` (";			
			
			result = statement.executeQuery("DESCRIBE "+ tabelname);
			
			while(result.next())
			{
				insert += "`"+ result.getString(1) +"`, ";
				colnr++;
			}			
			insert = insert.substring(0, insert.length()-2);
			insert += ") VALUES \n" ;
			
			addressInserts.add( insert );		
			
			result = null;
			insert = null;
			
			// Step 2:
			// addressID is saved earlier
			/*
			result = statement.executeQuery("SELECT * FROM "+ tabelname +" WHERE "+ MuseumDB.Address.ID  +" = " + adressID );
			
			while(result.next())
				addressInserts.add( getElement(result, colnr) + "\n" );		*/
										
			/**
			 * Insert Sections
			 */
			ArrayList<Integer> sectionList = new ArrayList<Integer>();
			tabelname = MuseumDB.Section.TABLE_NAME ;
			result = null;
			colnr = 0;
			
			// Step 1:
			insert = "\nINSERT INTO `"+ tabelname + "` (";			
			
			result = statement.executeQuery("DESCRIBE "+ tabelname);
			
			while(result.next())
			{
				insert += "`"+ result.getString(1) +"`, ";
				colnr++;
			}			
			insert = insert.substring(0, insert.length()-2);
			insert += ") VALUES \n" ;			
			
			addToZIP(zipOutputStream, insert);	
					
			result = null;
			insert = null;			
			
			// Step 2:
			result = statement.executeQuery("SELECT * FROM "+ tabelname +" WHERE "+ MuseumDB.Section.MUSEUM_ID +" = " + musID );
			
			while(result.next())
			{
				// Get Section Id's of every section of the museum
				sectionList.add(result.getInt(1)); // Step 3
			
				addToZIP(zipOutputStream, getElement(result, colnr) + "\n");				
			}
		
				
			/**
			 * Insert category
			 */	
			// IDList is now the Id's of all sections

			tabelname = MuseumDB.Category.TABLE_NAME;
			result = null;
			colnr = 0;
			
			// Step 1:
			insert = "\nINSERT INTO `"+ tabelname + "` (";			
			
			result = statement.executeQuery("DESCRIBE "+ tabelname);
			
			while(result.next())
			{
				insert += "`"+ result.getString(1) +"`, ";
				colnr++;
			}			
			insert = insert.substring(0, insert.length()-2);
			insert += ") VALUES \n" ;			
			
			addToZIP(zipOutputStream, insert);	
					
			result = null;
			insert = null;
			
			// Step 2: 
			result = statement.executeQuery("SELECT * FROM "+ tabelname +" WHERE "+ MuseumDB.Category.MUSEUM_ID + " = " + musID );
			
			while(result.next())
			{			
				addToZIP(zipOutputStream, getElement(result, colnr) + "\n");
			}
					
			
			/**
			 * Insert contact
			 */	
			ArrayList<Integer> roleList = new ArrayList<>();
			// IDList is now the Id's of all sections
			tabelname = MuseumDB.Contact.TABLE_NAME;
			result = null;
			colnr = 0;
			
			// Steps 1:
			insert = "\nINSERT INTO `"+ tabelname + "` (";			
			
			result = statement.executeQuery("DESCRIBE "+ tabelname);
			
			while(result.next())
			{
				insert += "`"+ result.getString(1) +"`, ";
				colnr++;
			}			
			insert = insert.substring(0, insert.length()-2);
			insert += ") VALUES \n" ;			
			
			addToZIP(zipOutputStream, insert);	
					
			result = null;
			insert = null;
			
			// Step 2: 			
			result = statement.executeQuery("SELECT * FROM "+ tabelname +" WHERE "+ MuseumDB.Contact.ROLE_ID + " IN ( SELECT "+ 
											MuseumDB.Role.ID +" FROM "+ MuseumDB.Role.TABLE_NAME +" WHERE "+ 
											MuseumDB.Role.MUSEUM_ID +" = '"+ musID  +"')");
			
			while(result.next())
			{	
				addressList.add(result.getInt(MuseumDB.Contact.ADDRESS_ID ) ); //Step 3
				
				addToZIP(zipOutputStream, getElement(result , colnr) + "\n");
				roleList.add( result.getInt( MuseumDB.Contact.ROLE_ID));
			}			
					
			/**
			 * Insert exhibit
			 */
			// IDList is now the Id's of all sections
			tabelname = MuseumDB.Exhibit.TABLE_NAME;
			result = null;
			colnr = 0;
			
			// Step 1:
			insert = "\nINSERT INTO `"+ tabelname + "` (";			
			
			result = statement.executeQuery("DESCRIBE "+ tabelname);
			
			while(result.next())
			{
				insert += "`"+ result.getString(1) +"`, ";
				colnr++;
			}			
			insert = insert.substring(0, insert.length()-2);
			insert += ") VALUES \n" ;
			
			addToZIP(zipOutputStream, insert);	
			
			result = null;
			insert = null;
			
			// Step 2:
			// get all exhibits which are in one sector of the museum			
			String sqlstatement = "SELECT * FROM "+ tabelname +" WHERE museum_id = " + musID + " AND " + MuseumDB.Exhibit.DELETED + " IS NULL" ;
			
			result = statement.executeQuery(sqlstatement );				
						
			ArrayList<Integer> exhibitList = new ArrayList<Integer>();
			
			while(result.next())
			{
				exhibitList.add(result.getInt(1)); // <= Step 3		
				addToZIP(zipOutputStream, getElement(result, colnr) + "\n");
			} 
			
			
			/**
			 * Insert history
			 */
			// IDList is now the Id's of all exhibits			
			tabelname = MuseumDB.History.TABLE_NAME;
			result = null;
			colnr = 0;
			
			// Step 1:
			insert = "\nINSERT INTO `"+ tabelname + "` (";			
			
			result = statement.executeQuery("DESCRIBE "+ tabelname);
			
			while(result.next())
			{
				insert += "`"+ result.getString(1) +"`, ";
				colnr++;
			}			
			insert = insert.substring(0, insert.length()-2);
			insert += ") VALUES \n" ;
			
			addToZIP(zipOutputStream, insert);	
			
			result = null;
			insert = null;			
			sqlstatement = null;
			
			// Step 2:
			// get all exhibits which are in one sector of the museum
			
			//Insert history
			result = statement.executeQuery( "SELECT * FROM history WHERE exhibit_id " +
												"IN (SELECT id FROM exhibit WHERE museum_id = "+ musID +")" );
			
			while( result.next() )
			{
				addToZIP(zipOutputStream , getElement(result, 15) + "\n" );
			}
			
			/**
			 * Insert outsourced - exhibit
			 */
			tabelname = "outsourced_exhibits";
			colnr = 0;
			
			//Step 1
			insert = "\nINSERT INTO `"+ tabelname + "` (";				
			
			result = statement.executeQuery("DESCRIBE "+ tabelname);
		
			while(result.next())
			{
				insert += "`"+ result.getString(1) +"`, ";
				colnr++;
			}			
			insert = insert.substring(0, insert.length()-2);
			insert += ") VALUES \n" ;
		
			addToZIP(zipOutputStream, insert);
			
			//Step 2
			result = statement.executeQuery("SELECT count(*) FROM outsourced_exhibits " +
											"WHERE exhibit_id " +
											"IN (SELECT id FROM exhibit WHERE museum_id = " + musID + " ) " );
			
			result.next();
			
			//If something has to be saved
			if( result.getInt(1) > 0 )
			{				
				result = statement.executeQuery("SELECT * FROM outsourced_exhibits " +
												"WHERE outsourced_id " +
												"IN (SELECT id FROM outsourced WHERE museum_id = " + musID + " ) " );
				
				while(result.next())
				{
					addToZIP(zipOutputStream, getElement(result, colnr) + "\n");
				}				
			}
			
			/**
			 * Insert Outsourced
			 */			
			tabelname = MuseumDB.Outsourced.TABLE_NAME;
			result = null;
			colnr= 0;
			
			// Step 1:
			insert = "\nINSERT INTO `"+ tabelname + "` (";				
						
			result = statement.executeQuery("DESCRIBE "+ tabelname);
			
			while(result.next())
			{
				insert += "`"+ result.getString(1) +"`, ";
				colnr++;
			}			
			insert = insert.substring(0, insert.length()-2);
			insert += ") VALUES \n" ;
			
			addToZIP(zipOutputStream, insert);			
			
			// Step 2:
			result = statement.executeQuery("SELECT count(*) FROM outsourced WHERE museum_id = "+ musID );
											
			result.next();
			
			//if there is something to be saved
			if(result.getInt(1) > 0)
			{
				result = statement.executeQuery("SELECT * FROM outsourced WHERE museum_id = "+ musID );

				while(result.next())
				{
					addressList.add( result.getInt(6) );
					
					addToZIP(zipOutputStream, getElement(result, 11) + "\n" );				
				}				
			}
						
			/**
			 * Here we save the addresses which are still needed
			 */
			if(! addressList.isEmpty())
			{
				ArrayList<String> sqlstatements = getOrderedSQL(addressList, "SELECT * FROM address WHERE " , "id" , 5);
				
				for (String sql : sqlstatements)
				{
					result = statement.executeQuery( sql);
					
					while(result.next())
					{
						addressInserts.add( getElement(result, 10)+ "\n"   );										
					}	
				}
				
			}
			
			for(String str: addressInserts)
			{
				addToZIP(zipOutputStream, str );
			}
			
			/**
			 * Insert exhibit_Label
			 */
			tabelname = MuseumDB.ExhibitLabel.TABLE_NAME;
			result = null;
			colnr = 0;
						
			// Steps 1:
			insert = "\nINSERT INTO `"+ tabelname + "` (";			
						
			result = statement.executeQuery("DESCRIBE "+ tabelname);
						
			while(result.next())
			{
				insert += "`"+ result.getString(1) +"`, ";
				colnr++;
			}			
			insert = insert.substring(0, insert.length()-2);
			insert += ") VALUES \n" ;			
						
			addToZIP(zipOutputStream, insert);	
								
			result = null;
			insert = null;
						
			// Step 2: 
			//help is the ArrayList<String from above
			ArrayList<String> help = getOrderedSQL(exhibitList, "SELECT * FROM " + tabelname + " WHERE ", 
											MuseumDB.ExhibitLabel.EXHIBIT_ID, 20 );
			
			ArrayList<Integer> LabelId  = new ArrayList<Integer>();
			
			for(String helpst : help)
			{
				result = statement.executeQuery( helpst );
				
				while(result.next())
				{
					LabelId.add( result.getInt( MuseumDB.ExhibitLabel.LABEL_ID) ); // <= Step 3
					
					insert = getElement(result, colnr);						
								
					addToZIP(zipOutputStream, insert+"\n");					
				}		
			}
			
			/**
			 * Insert Label
			 */
			tabelname = MuseumDB.Label.TABLE_NAME;
			result = null;
			colnr = 0;
						
			// Steps 1:
			insert = "\nINSERT INTO `"+ tabelname + "` (";			
						
			result = statement.executeQuery("DESCRIBE "+ tabelname);
						
			while(result.next())
			{
				insert += "`"+ result.getString(1) +"`, ";
				colnr++;
			}			
			insert = insert.substring(0, insert.length()-2);
			insert += ") VALUES \n" ;			
						
			addToZIP(zipOutputStream, insert);	
								
			result = null;
			insert = null;
						
			// Step 2: 
			//help is the ArrayList<String from above
			help = getOrderedSQL(LabelId, "SELECT * FROM " + tabelname + " WHERE ", 
											MuseumDB.Label.ID , 20 );			
			
			for(String helpst : help)
			{
				result = statement.executeQuery( helpst );
				
				while(result.next())
				{					
					insert = getElement(result, colnr);						
					addToZIP(zipOutputStream, insert + "\n");					
				}		
			}
			
			/**
			 * Insert role
			 */
			result = null;
			sqlstatement = null;
			
			tabelname = MuseumDB.Role.TABLE_NAME;		
			colnr = 0;
			
			//Step 1:
			insert = "\nINSERT INTO `"+ tabelname + "` (";			
			
			result = statement.executeQuery("DESCRIBE "+ tabelname);
						
			while(result.next())
			{
				insert += "`"+ result.getString(1) +"`, ";
				colnr++;
			}			
			insert = insert.substring(0, insert.length()-2);
			insert += ") VALUES \n" ;
						
			addToZIP(zipOutputStream, insert);
			
			//Step 2:
			//Save roles from museum
			insert = null;		
			
			help = getOrderedSQL( roleList , "SELECT * FROM " + tabelname + " WHERE ", 
					MuseumDB.Role.ID , 20 );
			
			for(String ins : help)
			{
				result = statement.executeQuery(ins);
				
				while(result.next())
				{
					insert = getElement(result, colnr);						
					addToZIP(zipOutputStream, insert + "\n");
				}
				
			}
			
			
			/**
			 * Insert images
			 */			
			result = null;
			sqlstatement = null;		
			
			zipOutputStream.putNextEntry( new ZipEntry("imagettable.txt") );
			
			sqlstatement = "SELECT `" + MuseumDB.Images.ID + "` , `" + 
								MuseumDB.Images.EXHIBIT_ID + "`, `" + 
								MuseumDB.Images.NAME + "` FROM " + 
								MuseumDB.Images.TABLE_NAME + " WHERE ";
			
			help = getOrderedSQL(exhibitList, sqlstatement, MuseumDB.Images.EXHIBIT_ID , 10);
								
			for(String helpstr : help)
			{
				result = statement.executeQuery(helpstr);
			
				while(result.next() )
				{
					String row = "< " + result.getString(1);
					row += " ; " + result.getString(2) + " ; " +result.getString(3)+" >\n";	
					addToZIP( zipOutputStream , row  );
				}
			}		
			zipOutputStream.closeEntry();
			
			//Bilder werden eingefügt			
			System.out.println("Bilder werden eingefügt");
			
			result = null;			
			ResultSet images = null;
			String sqlStmt = "";
			Statement imagestmt = Configuration.getInstance().getConnection().createStatement();
			result = statement.executeQuery("SELECT id FROM `images` WHERE exhibit_id IN (SELECT id FROM exhibit WHERE museum_id = "+ musID + ")");			
			
			while(result.next())
			{
				sqlStmt = "SELECT id, image FROM images WHERE id = " + result.getInt("id") + " ";
				
				 images = imagestmt.executeQuery(sqlStmt);
				 
				 while(images.next())
				 {
					entry = new ZipEntry(""+ images.getInt(1)+".png" );
					zipOutputStream.putNextEntry(entry);
											
					byte[] img = images.getBytes(2);
						
					zipOutputStream.write(img, 0 , img.length );					
											
					zipOutputStream.closeEntry();
					System.out.println("Speichere Bild: " + images.getInt(1) );					
				 }
			}			
			
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}		
		
		/**
		 * Do some clean up work
		 */
		try {
			statement.close();		
			
			zipOutputStream.close();			
			
		} catch (IOException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}	
	}
	
	/**
	 * Creates a backup of the whole system. Can only be called by the method:
	 * 		public static void backup(String address, Integer musID)
	 * 
	 * @param Fileaddress: the file address where the backup should be. It has to be a *.zip file
	 * @throws ConnectionException 
	 */
	private static void backup(String Fileaddress, ProcessCallBack callback ) throws ConnectionException
	{	
		String address = Fileaddress;
						
		Connection connection = null;
		Statement statement = null;
		ResultSet result;
		
		DatabaseMetaData MetaData = null;
		ResultSet MetaResult = null;		
		
		ZipOutputStream zipOutputStream = null;
		ZipEntry entry = null;		
			
		/**	
		 * Sets Connection to the File and to the Database
		 */
		try {
			zipOutputStream = new ZipOutputStream( new FileOutputStream(address)) ;
			
			Configuration.getInstance().setDefault();			
			connection = Configuration.getInstance().getConnection();
			
			MetaData = connection.getMetaData();
			statement = connection.createStatement();				
			
		} catch (IOException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		} 		
		
		/** 
		 * Here the actual File-Writing takes place 
		 */
		try {
			entry = new ZipEntry("backup.sql");
			zipOutputStream.putNextEntry(entry);
			
			addToZIP(zipOutputStream, "-- -------------------------------------------------\n");
			addToZIP(zipOutputStream, "-- ----- Caution: Do not edit this file  \n");
			addToZIP(zipOutputStream, "-- -- except you REALLY know what you are doing\n");
			addToZIP(zipOutputStream, "-- - Otherwhise the complete backup could go wrong! \n");
			addToZIP(zipOutputStream, "-- -------------------------------------------------\n\n");		
			
			addToZIP(zipOutputStream, "-? (`WholeSystemBackup`)\n\n");	
			
			addToZIP(zipOutputStream, "-- SQL Dump   \n");
			addToZIP(zipOutputStream, "-- erstellt für die Datenbank: " +  Configuration.getInstance().getLocalDatabase().getDatabaseName()  + "\n");			
			
			result = statement.executeQuery("SELECT CURDATE( ) , CURTIME( ) ");			
			result.next();				
			addToZIP(zipOutputStream, "-- erstellt am " + result.getString(1).substring(8, 10) +"."+ result.getString(1).substring(5, 7)
									+ "." + result.getString(1).substring(0, 4) +  " um " + result.getString(2) + "\n\n");
			
			result = null;
			
			/**
			 * Go through all tables
			 */
			MetaResult = MetaData.getTables(null, null, null, null);
			
			while(MetaResult.next() )
			{
				String tablename = MetaResult.getString(3);	
						
				//Checks if table empty
				result = statement.executeQuery("SELECT count(*) FROM " + tablename );			
				result.next();
				if(result.getInt(1) == 0   || tablename.equals("images"))
					continue;
				
				String insert = "INSERT INTO `" + tablename + "` (";
				int columnumber  = 0;
				
				addToZIP(zipOutputStream, "\n\n-- -------------------------------\n");
				addToZIP(zipOutputStream, "-- -- Fills Table `"+ tablename  +"`\n");
				addToZIP(zipOutputStream, "-- --------------------------------\n\n");			
			
				
				result = statement.executeQuery("DESCRIBE "+ tablename );
							
				while(result.next())
				{	
					columnumber++;					
					insert += "`" + result.getString(1) + "`, ";
				}				
				
				/** 
				 *Fill in Values
			     */
				String appendix;
				
				//looks if table is empty
				result = null;				
				
				result = statement.executeQuery("SELECT count(*) FROM " + tablename);				
				result.next();
				
				if(result.getInt(1)==0) continue;
				
				//fills the describtions
				result = null;
				insert = insert.substring(0, insert.length()-2) + ") VALUES";
				addToZIP(zipOutputStream, insert + "\n");			
				
				
				result = statement.executeQuery("SELECT * FROM " + tablename);
				appendix = "";				
				
				while (result.next())
				{
					appendix = "(";
					
					for(int i = 1; i<=columnumber; i++)
					{ 
						appendix+= "'" + result.getString(i) + "' , ";
					}					
					appendix = appendix.substring(0, appendix.length() -3);
					appendix += ")";
					
					addToZIP(zipOutputStream, appendix + "\n");
				}
				
			} //End of while(MetaResult.next() )
			
			//Close this file inside of the ZIP archive
			zipOutputStream.closeEntry();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}		
						
		/**
		 * Save the images 
		 */
		result = null;
		entry = null;
		
		try {
			entry = new ZipEntry("imagettable.txt");
			zipOutputStream.putNextEntry(entry);			
			
			result = statement.executeQuery("SELECT id, exhibit_id, name FROM `images`");
			
			while(result.next())
			{
				String input = "";
				
				input += "< "+ result.getString(1) + " ; " + result.getString(2) +" ; " + result.getString(3) + " >";
				
				System.out.println("Schreibe in imagetable: " +  result.getInt(1));
				
				addToZIP(zipOutputStream, input + "\n");				
			}			
			
			zipOutputStream.closeEntry();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	
		/**
		 *  Fill in the Images
		 */
		result = null;
		
		long time = System.currentTimeMillis();
		
		try {
			/*	  
			 *  Getting image one by one is ineffective.
                         *  The best way could be, that there will be a Query for every 5 images
                         *  OR all images for an exhibit.
			 */
			result = null;
			int num = 1;
			ResultSet images = null;
			String sqlStmt = "";
			Statement imagestmt = Configuration.getInstance().getConnection().createStatement();
			result = statement.executeQuery("SELECT id FROM `images`");			
			
			while(result.next())
			{
				sqlStmt = "SELECT id, image FROM images WHERE id = " + result.getInt("id") + " ";
				
				 images = imagestmt.executeQuery(sqlStmt);
				 
				 while(images.next())
				 {
					entry = new ZipEntry(""+ images.getInt(1)+".png" );
					zipOutputStream.putNextEntry(entry);
											
					byte[] img = images.getBytes(2);
						
					zipOutputStream.write(img, 0 , img.length );					
											
					zipOutputStream.closeEntry();
					System.out.println("Speichere Bild: " + images.getInt(1) );					
				 }
			}
			
			time = System.currentTimeMillis() - time;
			System.out.println("Bilder Laufzeit: " + time + " bei num = " + num);
						
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} 
			
		
		/**
		 * Some clean-up work
		*/		
		try {
			statement.close();
			
			zipOutputStream.flush();
			zipOutputStream.close();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}	
			
	}
	
	
	private static ArrayList<String> getOrderedSQL(ArrayList<Integer> idList, String front, String attribut , int numb)
	{
		ArrayList<String> ret = new ArrayList<String>();
		String inString;
		int lauf = 1;
	
		String helpstr = "";
		boolean endWell = false;		
		
		if(idList.isEmpty()) return ret;
		
		for(Integer help : idList)
		{
			if(lauf % numb == 0)
			{
				helpstr += " " + attribut + " = " + help;
				
				inString = front + helpstr;
				
				endWell = true;
				
				ret.add(inString);
				helpstr = "";
			}
			
			else
			{
			helpstr += " " + attribut + " = " + help + " OR ";
			endWell = false;
			}
			
			lauf++;	
		}
		
		if(!endWell)
		{			
			inString = front + helpstr.substring(0, helpstr.length()-4);
			ret.add(inString);
		}
		
		return ret;
	}
	
	
	/**
	 *  Returns a String in the form ('column1', 'column2',...)
	 * 
	 * @throws SQLException
	 * 
	 */
	private static String getElement(ResultSet res, int colNr) throws SQLException
	{
		String result = "(";
		for(int i = 1; i<= colNr; i++)
		{
			result += "'" + res.getString(i) + "' , " ;
		}
		
		if(result.length() >= 3)
			result = result.substring(0, result.length()-3) + ")";		
		
		return result;
	}
	
	
	/**
	 * Adds a String to a given ZipOutputStream 
	 * 
	 * @param ZipStream
	 * @param income
	 * 
	 * @throws UnsupportedEncodingException
	 * @throws IOException
	 */
	private static void addToZIP(ZipOutputStream ZipStream, String income) throws UnsupportedEncodingException, IOException
	{
		ZipStream.write(income.getBytes("UTF-8"), 0, income.getBytes("UTF-8").length) ;
	}	
}